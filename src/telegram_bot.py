# telegram_bot.py
import asyncio
import json
import os
import signal
import sys
from dotenv import load_dotenv
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__)))
from mcp.weather import get_weather
from mcp.wiki import get_wiki_summary
from mcp.github import search_github
from knowledge_base import add_fact, search_fact



load_dotenv()  # –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ .env —Å TELEGRAM_TOKEN")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = None

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
    print("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    if app:
        app.stop()
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞
signal.signal(signal.SIGINT, signal_handler)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ü–æ–º–æ—â–Ω–∏–∫ –õ—é–±—ã üòä\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/health ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞\n"
        "<code>/weather &lt;–≥–æ—Ä–æ–¥&gt;</code> ‚Äî —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ\n"
        "<code>/wiki &lt;—Ç–µ–º–∞&gt;</code> ‚Äî –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏\n"
        "/github &lt;–∑–∞–ø—Ä–æ—Å&gt; ‚Äî –ø–æ–∏—Å–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –Ω–∞ GitHub\n"
        "<code>/search &lt;–∑–∞–ø—Ä–æ—Å&gt;</code> ‚Äî –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n"
        "<code>/remember &lt;—Ñ–∞–∫—Ç&gt;</code> ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–∫—Ç –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π\n"
        "/context [N] ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞\n"
        "/forget ‚Äî –∑–∞–±—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî –∏ —è –æ—Ç–≤–µ—á—É."
    )
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ –∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ –∏ /help
    await help_command(update, context)

async def health_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    status = {
        "telegram": "ok",
        "github": "ok",
        "weather": "ok",
        "wiki": "ok",
    }
    pretty = "\n".join(f"{k}: {v}" for k, v in status.items())
    await update.message.reply_text(f"Health status:\n{pretty}")



async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /weather –ú–∏–Ω—Å–∫")
        return

    city = " ".join(context.args)
    report = get_weather(city)
    await update.message.reply_text(report)


async def wiki_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏"""
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–µ–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: /wiki –ú–∏–Ω—Å–∫")
        return

    query = " ".join(context.args)
    result = get_wiki_summary(query)
    await update.message.reply_text(result)



async def github_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ GitHub-–∫–æ–º–∞–Ω–¥—ã"""
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: /github telegram bot")
        return

    query = " ".join(context.args)
    await update.message.reply_text("üîé –ò—â—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–∞ GitHub...")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫–∏—Ä—É—é—â–∏–π HTTP-–∑–∞–ø—Ä–æ—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
    result = await asyncio.to_thread(search_github, query)
    await update.message.reply_text(result)

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: /search Python asyncio")
        return
    query = " ".join(context.args)
    results = search_fact(query)
    if results:
        text = "üîé –ù–∞—à–ª–æ—Å—å –≤ –±–∞–∑–µ:\n" + "\n".join(results)
    else:
        text = "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å."
    await update.message.reply_text(text)

async def remember_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ñ–∞–∫—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: /remember Python —Å–æ–∑–¥–∞–Ω –ì–≤–∏–¥–æ –≤–∞–Ω –†–æ—Å—Å—É–º–æ–º")
        return
    fact = " ".join(context.args)
    try:
        add_fact(fact)
        await update.message.reply_text("‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª–∞: " + fact)
    except Exception as e:
        await update.message.reply_text(f"[KB] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

# –§–∞–π–ª –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π –ø–∞–º—è—Ç–∏ (–≤–Ω—É—Ç—Ä–∏ —Ç–æ–º–∞ data/)
MEMORY_FILE = "data/memory.json"
MAX_HISTORY_PER_USER = 200  # –º—è–≥–∫–∏–π –ª–∏–º–∏—Ç –Ω–∞ –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

def load_memory():
    if os.path.exists(MEMORY_FILE):
        with open(MEMORY_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_memory():
    with open(MEMORY_FILE, "w", encoding="utf-8") as f:
        json.dump(memory, f, ensure_ascii=False, indent=2)

# –ü—Ä–æ—Å—Ç–∞—è –ø–∞–º—è—Ç—å –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è: user_id -> —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
memory = load_memory()

def get_user_history(user_id: str, limit: int | None = None):
    history = memory.get(user_id, [])
    if limit is not None and limit > 0:
        return history[-limit:]
    return history

def append_user_entry(user_id: str, role: str, text: str):
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–µ–º—Å—è –º—è–≥–∫–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏
    memory.setdefault(user_id, []).append({"role": role, "text": text})
    if len(memory[user_id]) > MAX_HISTORY_PER_USER:
        memory[user_id] = memory[user_id][-MAX_HISTORY_PER_USER:]
    save_memory()

def clear_user_history(user_id: str):
    memory[user_id] = []
    save_memory()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    text = update.message.text.strip()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å
    append_user_entry(user_id, "user", text)

    # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã
    if "–ø—Ä–∏–≤–µ—Ç" in text.lower():
        reply = "–ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! üòä"
    elif "–∫–∞–∫ –¥–µ–ª–∞" in text.lower():
        reply = "–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ, —Ä–∞–±–æ—Ç–∞—é –∫–∞–∫ —á–∞—Å—ã ü§ñ"
    elif "—Å–ø–∞—Å–∏–±–æ" in text.lower():
        reply = "–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üå∏"
    elif "—á—Ç–æ —Ç—ã –ø–æ–º–Ω–∏—à—å" in text.lower():
        past = [m['text'] for m in memory[user_id][-3:]]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
        reply = "–Ø –ø–æ–º–Ω—é, —á—Ç–æ –º—ã –Ω–µ–¥–∞–≤–Ω–æ –≥–æ–≤–æ—Ä–∏–ª–∏ –æ:\n" + "\n".join(past)
    else:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        kb_hits = []
        try:
            kb_hits = search_fact(text) or []
        except Exception:
            kb_hits = []
        if kb_hits:
            top = kb_hits[:3]
            reply = "–Ø –ø–æ–∫–∞ –Ω–µ –≤—Å—ë –ø–æ–Ω–∏–º–∞—é, –Ω–æ –≤–æ—Ç —á—Ç–æ –Ω–∞—à–ª–∞ –≤ –±–∞–∑–µ:\n" + "\n".join(top)
        else:
            reply = "–Ø –ø–æ–∫–∞ –Ω–µ –≤—Å—ë –ø–æ–Ω–∏–º–∞—é, –Ω–æ —Å—Ç–∞—Ä–∞—é—Å—å —É—á–∏—Ç—å—Å—è —Å –∫–∞–∂–¥—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º üí´"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —Ç–æ–∂–µ
    append_user_entry(user_id, "bot", reply)

    await update.message.reply_text(reply)

async def context_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = str(update.effective_user.id)
    try:
        limit = int(context.args[0]) if context.args else 10
    except Exception:
        limit = 10
    limit = max(1, min(limit, 50))

    history = get_user_history(user_id, limit)
    if not history:
        await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç.")
        return

    lines = []
    for entry in history:
        prefix = "user:" if entry.get("role") == "user" else "bot:"
        lines.append(f"{prefix} {entry.get('text','')}")
    await update.message.reply_text("\n".join(lines))

async def forget_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = str(update.effective_user.id)
    clear_user_history(user_id)
    await update.message.reply_text("–Ø –∑–∞–±—ã–ª–∞ –Ω–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏.")


def run_bot():
    global app
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("health", health_command))
    app.add_handler(CommandHandler("weather", weather_command))
    app.add_handler(CommandHandler("wiki", wiki_command))
    app.add_handler(CommandHandler("github", github_command))
    app.add_handler(CommandHandler("remember", remember_command))
    app.add_handler(CommandHandler("context", context_command))
    app.add_handler(CommandHandler("forget", forget_command))
    app.add_handler(CommandHandler("search", search_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ü—Ä–∏–º–µ—Ä: –¥–æ–±–∞–≤–∏–º –ø–∞—Ä—É —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å)
    try:
        add_fact("Python ‚Äî —ç—Ç–æ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ì–≤–∏–¥–æ –≤–∞–Ω –†–æ—Å—Å—É–º–æ–º.")
        add_fact("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å –≤ Python —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ asyncio –∏ await.")
        add_fact("Telegram Bot API –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        add_fact("ChromaDB ‚Äî —ç—Ç–æ –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º.")
    except Exception:
        # –ï—Å–ª–∏ embedding-–º–æ–¥–µ–ª—å –µ—â—ë —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç,
        # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å
        pass


    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    
    try:
        app.run_polling()
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        if app:
            app.stop()

