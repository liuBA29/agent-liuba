import os
import sys
import signal
import json
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
import openai
import requests

# ------------------ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π ------------------
sys.path.append(os.path.join(os.path.dirname(__file__)))

from mcp.weather import get_weather
from mcp.wiki import get_wiki_summary
from mcp.github import search_github

# ------------------ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ ------------------
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    raise RuntimeError("–ù—É–∂–Ω—ã TELEGRAM_TOKEN –∏ OPENAI_API_KEY –≤ .env")

openai.api_key = OPENAI_API_KEY

# ------------------ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ------------------
app = None
MEMORY_DIR = "conversations"
os.makedirs(MEMORY_DIR, exist_ok=True)

# ------------------ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ ------------------
def signal_handler(signum, frame):
    print("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    if app:
        app.stop()
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

# ------------------ –†–∞–±–æ—Ç–∞ —Å –ø–∞–º—è—Ç—å—é ------------------
def get_memory_file(user_id):
    """–°–æ–∑–¥–∞—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    return os.path.join(MEMORY_DIR, f"{user_id}_{timestamp}.json")

def load_memory(file_path):
    if not os.path.exists(file_path):
        return []
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return []

def save_memory(file_path, memory):
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(memory, f, ensure_ascii=False, indent=2)

def append_message(file_path, role, text):
    memory = load_memory(file_path)
    memory.append({
        "role": role,
        "text": text,
        "time": datetime.now().isoformat(timespec="seconds")
    })
    memory = memory[-50:]  # —Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
    save_memory(file_path, memory)

def get_context(file_path):
    return load_memory(file_path)

# ------------------ –ö–æ–º–∞–Ω–¥—ã ------------------
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ü–æ–º–æ—â–Ω–∏–∫ –õ—é–±—ã üòä\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/health - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞\n"
        "/weather <–≥–æ—Ä–æ–¥> - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
        "/wiki <—Ç–µ–º–∞> - –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏\n"
        "/github <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –Ω–∞ GitHub\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî –∏ —è –æ—Ç–≤–µ—á—É üå∏"
    )
    await update.message.reply_text(text)

async def health_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    status = {
        "telegram": "ok",
        "mcp1": "connected",
        "vector_db": "not_initialized",
        "memory_dir": MEMORY_DIR,
    }
    pretty = "\n".join(f"{k}: {v}" for k, v in status.items())
    await update.message.reply_text(f"Health status:\n{pretty}")

async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /weather –ú–∏–Ω—Å–∫")
        return

    city = " ".join(context.args)
    report = get_weather(city)

    user_id = update.message.from_user.id
    file_path = get_memory_file(user_id)
    append_message(file_path, "user", f"/weather {city}")
    append_message(file_path, "bot", report)

    await update.message.reply_text(report)

async def wiki_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–µ–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: /wiki –ú–∏–Ω—Å–∫")
        return

    query = " ".join(context.args)
    result = get_wiki_summary(query)

    user_id = update.message.from_user.id
    file_path = get_memory_file(user_id)
    append_message(file_path, "user", f"/wiki {query}")
    append_message(file_path, "bot", result)

    await update.message.reply_text(result)

async def github_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: /github telegram bot")
        return

    query = " ".join(context.args)
    result = search_github(query)

    user_id = update.message.from_user.id
    file_path = get_memory_file(user_id)
    append_message(file_path, "user", f"/github {query}")
    append_message(file_path, "bot", result)

    await update.message.reply_text(result)

# ------------------ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —á–∞—Ç ------------------
async def chat_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    user_text = update.message.text.strip()
    user_text_lower = user_text.lower()
    user_id = update.message.from_user.id
    file_path = get_memory_file(user_id)

    append_message(file_path, "user", user_text)

    # --- –ü—Ä–æ—Å—Ç—ã–µ –∂–∏–≤—ã–µ –æ—Ç–≤–µ—Ç—ã ---
    greetings = ["hi", "hello", "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å"]
    farewells = ["bye", "–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "—É–≤–∏–¥–∏–º—Å—è"]

    if user_text_lower in greetings:
        bot_reply = "–ü—Ä–∏–≤–µ—Ç! üòä –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è?"
        append_message(file_path, "bot", bot_reply)
        await update.message.reply_text(bot_reply)
        return
    elif user_text_lower in farewells:
        bot_reply = "–ü–æ–∫–∞! üå∏ –ë—É–¥–µ—Ç –ø—Ä–∏—è—Ç–Ω–æ —Å–Ω–æ–≤–∞ —Å —Ç–æ–±–æ–π –ø–æ–æ–±—â–∞—Ç—å—Å—è."
        append_message(file_path, "bot", bot_reply)
        await update.message.reply_text(bot_reply)
        return

    # --- –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenAI –±–µ–∑ —Å—Å—ã–ª–æ–∫ ---
    context_messages = get_context(file_path)
    messages = [
        {"role": "system", "content": (
            "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –õ—é–±—ã. "
            "–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º, "
            "–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—Å—Ç–∞–≤–ª—è–π —Å—Å—ã–ª–∫–∏ –Ω–∞ GitHub –∏–ª–∏ –ª—é–±—ã–µ –≤–Ω–µ—à–Ω–∏–µ —Å–∞–π—Ç—ã."
        )},
    ] + [
        {"role": "user", "content": msg["text"]} if msg["role"] == "user" else
        {"role": "assistant", "content": msg["text"]}
        for msg in context_messages
    ]

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=250
        )
        bot_reply = response.choices[0].message.content.strip()
    except Exception as e:
        bot_reply = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT: {e}"

    append_message(file_path, "bot", bot_reply)
    await update.message.reply_text(bot_reply)

# ------------------ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ------------------
def run_bot():
    global app
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("health", health_command))
    app.add_handler(CommandHandler("weather", weather_command))
    app.add_handler(CommandHandler("wiki", wiki_command))
    app.add_handler(CommandHandler("github", github_command))

    # –ß–∞—Ç
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    try:
        app.run_polling()
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        if app:
            app.stop()

if __name__ == "__main__":
    run_bot()
