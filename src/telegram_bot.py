from memory import append_message, get_context
import os
import signal
import sys
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__)))

from mcp.weather import get_weather
from mcp.wiki import get_wiki_summary
from mcp.github import search_github

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ .env —Å TELEGRAM_TOKEN")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = None

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
    print("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    if app:
        app.stop()
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞
signal.signal(signal.SIGINT, signal_handler)

# ------------------ –ö–æ–º–∞–Ω–¥—ã ------------------

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ü–æ–º–æ—â–Ω–∏–∫ –õ—é–±—ã üòä\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/health - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞\n"
        "/weather <–≥–æ—Ä–æ–¥> - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
        "/wiki <—Ç–µ–º–∞> - –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏\n"
        "/github <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –Ω–∞ GitHub\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî –∏ —è –æ—Ç–≤–µ—á—É üå∏"
    )
    if update.message:
        await update.message.reply_text(text)

async def health_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
    if not update.message:
        return
    user_id = update.message.from_user.id
    context_messages = get_context(user_id)
    status = {
        "telegram": "ok",
        "mcp1": "connected",
        "vector_db": "not_initialized",
        "memory": f"{len(context_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ",
    }
    pretty = "\n".join(f"{k}: {v}" for k, v in status.items())
    await update.message.reply_text(f"Health status:\n{pretty}")

async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /weather"""
    if not update.message:
        return
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /weather –ú–∏–Ω—Å–∫")
        return

    city = " ".join(context.args)
    report = get_weather(city)

    user_id = update.message.from_user.id
    append_message(user_id, "user", f"/weather {city}")
    append_message(user_id, "bot", report)

    await update.message.reply_text(report)

async def wiki_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /wiki"""
    if not update.message:
        return
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–µ–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: /wiki –ú–∏–Ω—Å–∫")
        return

    query = " ".join(context.args)
    result = get_wiki_summary(query)

    user_id = update.message.from_user.id
    append_message(user_id, "user", f"/wiki {query}")
    append_message(user_id, "bot", result)

    await update.message.reply_text(result)

async def github_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /github"""
    if not update.message:
        return
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: /github telegram bot")
        return

    query = " ".join(context.args)
    result = search_github(query)

    user_id = update.message.from_user.id
    append_message(user_id, "user", f"/github {query}")
    append_message(user_id, "bot", result)

    await update.message.reply_text(result)

# ------------------ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —á–∞—Ç ------------------

async def chat_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ö—Ä–∞–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
    if not update.message or not update.message.text:
        return

    user_text = update.message.text
    user_id = update.message.from_user.id

    append_message(user_id, "user", user_text)

    context_messages = get_context(user_id)
    context_text = "\n".join([f"{m['role']}: {m['text']}" for m in context_messages])
    reply = f"–¢—ã —Å–∫–∞–∑–∞–ª–∞: {user_text}\n\nüß† –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}"

    append_message(user_id, "bot", reply)
    await update.message.reply_text(reply)

# ------------------ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ------------------

def run_bot():
    global app
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("health", health_command))
    app.add_handler(CommandHandler("weather", weather_command))
    app.add_handler(CommandHandler("wiki", wiki_command))
    app.add_handler(CommandHandler("github", github_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

    try:
        app.run_polling()
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        if app:
            app.stop()
